TITLE:: BufPlayGui
summary:: Simple GUI object for playing n-channel buffers with varible rate control
categories:: Undocumented classes
related:: Classes/SoundFileView, Classes/SoundFile
​
DESCRIPTION::
BufPlayGui relies on keyboard shortcuts with the eventual aim of making it as modal as possible
LIST::
##spacebar : play
##z : zoom to selection
##shift + z : zoom out by factor of 10
##h : show/hide control section
::
Load an audio file from disk using the load button. Press the control button to show and hide a simple control panel with basic controls for playback rate and dB scaling.
The three number boxes are display only and refer to the start and end of the selection in frames, and the duration of the selection in seconds.
​​​
CLASSMETHODS::
​
METHOD:: new
argument:: server
Server to run the instance of BufPlayGui
argument:: group
Group to place the instance of BufPlayGui
argument:: outbus
output bus of BufPlayGui
argument:: syncbus
output bus to write trigger signal. This is useful for syncing playback with other processes.
​
INSTANCEMETHODS::
​
METHOD:: getSynthName
Return the defName of the internal player function
​​
METHOD:: getNodeID
Return the NodeID of the internal player function
​
METHOD:: getBufnum
Return the buffer number of selected file
​
METHOD:: getStartFrame
Return start frame of selection - useful for processing later in the signal path
​
METHOD:: getEndFrame
Return end frame of selection- useful for processing later in the signal path
​
METHOD:: getDur
Return duration in seconds - useful for processing later in the signal path
​
METHOD:: getDurFrames
Return duration of selection in frames - useful for processing later in the signal path

METHOD:: group
Get or set the group for the BufPlayGui instance

METHOD:: outbus
Get or set the output bus for the BufPlayGui instance
​
EXAMPLES::
​
code::
//sync example - proof of concept

~syncBus = Bus.audio(s,1);

~bp = BufPlayGui.new(s, s.defaultGroup, 0, ~syncBus);

(
SynthDef(\trig, {
	var in = In.ar(~syncBus, 1);
	var trig = Trig1.ar(in);
	var sig = SinOsc.ar(440);
	var env = EnvGen.ar(Env.perc(), trig, doneAction: 0);
	Out.ar(0, sig * env);
}).add;
)

x = Synth(\trig)

//sine tone should play at the start of each loop/selection
x.free

//sync to record - not really necessary, but it seems to work

~out2chan = Bus.audio(s, 2)

~bp.outbus_(~out2chan)

b = Buffer.alloc(s, s.sampleRate * ~bp.getDur, 2)

(
SynthDef(\rec, {
	var audio = In.ar(~out2chan, 2);
	var sync = In.ar(~syncBus);
	var trig = ToggleFF.ar(sync);
	RecordBuf.ar(audio, b.bufnum, run: trig, loop: 0) * EnvGen.ar(Env.cutoff(0.01), gate: trig, doneAction: 2);
	Out.ar(0, audio);
}).add;
)

y = Synth(\rec, addAction: 'addToTail')

b.plot
b.duration
b.play
b.zero
b.free

b.write("...")
::
​
